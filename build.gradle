apply plugin: 'com.android.library'
apply plugin: 'jacoco'


jacoco {
    toolVersion = "0.7.1.201405082137"
}

task jacocoTestReport(type:JacocoReport, dependsOn: "check") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(android.sourceSets.main.java.srcDirs)
    sourceDirectories = files(android.sourceSets.main.java.srcDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}

build.dependsOn jacocoTestReport

android {
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }
    //compileSdkVersion 22
    //buildToolsVersion '22.0.1'
    compileSdkVersion rootProject.ext.compileSdkVersion
    useLibrary  'org.apache.http.legacy'

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [
                    'src',
                    'core/src',
                    'modules/google_cast/src',
                    'modules/firetv/src',
            ]
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        test {
            java.srcDirs = [
                    'core/test/src',
                    'modules/google_cast/test/src',
                    'modules/firetv/test/src',
            ]
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
        }
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
}

android.testOptions.unitTests.all {
     include '**/*Test.class'
 }

dependencies {
    implementation files('core/libs/java-websocket-patch.jar')
    //implementation files('core/libs/javax.jmdns_3.4.1-patch2.jar')
    implementation 'org.jmdns:jmdns:3.5.2'

    implementation fileTree(dir: 'modules/firetv/libs', include: '*.jar')

    api "androidx.legacy:legacy-support-v4:$rootProject.ext.androidxVersion"
    api "androidx.appcompat:appcompat:$rootProject.ext.androidxAppcompatVersion"
    api "androidx.mediarouter:mediarouter:$rootProject.ext.androidxVersion"
    api "com.google.android.gms:play-services-cast:$rootProject.ext.playServicesVersion"

    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:2.4'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
    testImplementation 'xmlunit:xmlunit:1.4'
}

apply from: 'maven-push.gradle'
